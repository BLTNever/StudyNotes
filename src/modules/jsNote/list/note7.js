
import React from 'react';
import Highlight from 'react-highlight';

import { Card, Col, Row, Divider } from 'antd';

import { lexicalScope, dynamicScope } from './example';

const Note7 = () => (
    <div>
        <h2>作用域&闭包</h2>
        <div className="note-wrap">
            <h3>全局、函数作用域，词法作用域</h3>
            <Row gutter={16}>
                <h4>作用域：定义变量储存的区域。，并规定了如何查找变量（标识符）。</h4>
                <p>通俗的讲，作用域就是查找变量的地方。</p>
                <p>在查找变量的时候，现在函数作用域中查找，没找到，再去全局作用域中查找，查找变量的链条，称为<b>作用域链</b></p>
                <p>作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p>
                <p>ES6之前只有全局作用域和函数作用域，ES6中加入了块级作用域</p>
                <p>JavaScript采用词法作用域(lexical scoping)，也就是静态作用域。</p>
                <Col span={12}>
                    <Card title="全局、函数作用域">
                        <h4>函数作用域：变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量</h4>
                        <h4>全局作用域：不在任何函数内定义的变量就具有全局作用域，全局作用域的变量实际上被绑定到window的一个属性。</h4>
                        <p>1. 函数内部可以直接读取全局变量。</p>
                        <p>2. 正常情况下在函数外部是无法读取函数内的局部变量, 内部函数可以访问外部函数定义的变量。</p>
                        <p>3. 如何在函数外部读取到函数内部的局部变量： 在函数内部定义一个函数读取函数的值，并把该内部函数当作返回值。</p>
                    </Card>
                </Col>
                <Col span={12}>
                    <Card title="块级作用域">
                        <h4>for循环语句块中，无法定义具有局部作用域的变量， for循环中定义的变量是在函数内部的。</h4>
                        <h4>ES6引入新的关键字let、const，可以申明一个块级作用域的变量。</h4>
                        <p>let 声明的语法与 var 的语法一致。你基本上可以用 let 来代替 var 进行变量声明，但会将变量的作用域限制在当前代码块中。块级作用域有以下几个特点：</p>
                        <p><b>声明变量不会提升到代码块顶部</b></p>
                        <p><b>禁止重复声明</b></p>

                        <h4>块级作用域在如下情况被创建：</h4>
                        <p>在一个函数内部</p>
                        <p>在一个代码块（由一对花括号包裹）内部</p>
                    </Card>
                </Col>
            </Row>

            <Divider />

            <Row gutter={16}>
                <Col span={12}>
                    <Card title="静态作用域(词法作用域)与动态作用域">
                        <h4>词法作用域就是定义在词法阶段的作用域的。</h4>
                        <h4>无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。</h4>

                        <h4>动态作用域:</h4>
                        <p>词法作用域相对的是动态作用域，函数的作用域在函数调用的时候才决定。</p>
                       
                    </Card>
                </Col>
                <Col span={12}>
                    <Card title="例">
                        <h4>词法作用域：</h4>
                        <Highlight language="javascript">{lexicalScope}</Highlight>

                        <h4>动态作用域：</h4>
                        <p>下面脚本存成scope.bash, 在相应使用命令行执行 bash scope.bash查看结果</p>
                        <Highlight language="javascript">{dynamicScope}</Highlight>
                    </Card>
                </Col>
            </Row>
        </div>

        <div className="note-wrap">
            <h3>作用域链</h3>
            <Row gutter={16}>
                <Col span={12}>
                    <Card title="闭包的理解：">
                        <p><b>1. 当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包。</b></p>
                        <p><b>2. 闭包就是由函数创造的一个词法作用域，里面创建的变量被引用后，可以在这个词法环境之外自由使用。闭包通常用来创建内部变量，使得这些变量不能被外部随意修改，同时又可以通过指定的函数接口来操作。</b></p>
                        <p><b>3. 闭包是一种特殊的对象。它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。</b></p>
                        <p><b>4. 闭包就是指有权访问另一个函数作用域中的变量的函数。</b></p>
                    </Card>
                </Col>
                <Col span={12}>
                    <Card title="闭包的作用&注意点">
                        <p>1. 通过闭包，在外部环境访问内部环境的变量。</p>
                        <p>2. 让变量一直保存在内存中，不会被垃圾回收。</p>
                        <p>3. 在javascript中，如果一个对象不再被引用，那么这个对象就会被垃圾回收机制回收</p>
                        <p>4. 如果两个对象互相引用，而不再被第3者所引用，那么这两个互相引用的对象也会被回收</p>
                        <h4>使用闭包的注意点</h4>
                        <p>1. 通常，函数的作用域及其所有变量都会在函数执行结束后被销毁。但是，在创建了一个闭包以后，这个函数的作用域就会一直保存到闭包不存在为止。</p>
                        <p>2. 闭包会使函数中的变量被保存在内存中，内存消耗很多，不能滥用（解决办法：退出函数之前，将不使用的局部变量全部删除）</p>
                        <p>3. 闭包会在父函数外部，改变父函数内部变量的值</p>

                    </Card>
                </Col>
            </Row>
        </div>

        <div className="note-wrap">
            <h3>闭包</h3>
            <Row gutter={16}>
                <Col span={12}>
                    <Card title="闭包的理解：">
                        <p><b>1. 当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包。</b></p>
                        <p><b>2. 闭包就是由函数创造的一个词法作用域，里面创建的变量被引用后，可以在这个词法环境之外自由使用。闭包通常用来创建内部变量，使得这些变量不能被外部随意修改，同时又可以通过指定的函数接口来操作。</b></p>
                        <p><b>3. 闭包是一种特殊的对象。它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。</b></p>
                        <p><b>4. 闭包就是指有权访问另一个函数作用域中的变量的函数。</b></p>
                    </Card>
                </Col>
                <Col span={12}>
                    <Card title="闭包的作用&注意点">
                        <p>1. 通过闭包，在外部环境访问内部环境的变量。</p>
                        <p>2. 让变量一直保存在内存中，不会被垃圾回收。</p>
                        <p>3. 在javascript中，如果一个对象不再被引用，那么这个对象就会被垃圾回收机制回收</p>
                        <p>4. 如果两个对象互相引用，而不再被第3者所引用，那么这两个互相引用的对象也会被回收</p>
                        <h4>使用闭包的注意点</h4>
                        <p>1. 通常，函数的作用域及其所有变量都会在函数执行结束后被销毁。但是，在创建了一个闭包以后，这个函数的作用域就会一直保存到闭包不存在为止。</p>
                        <p>2. 闭包会使函数中的变量被保存在内存中，内存消耗很多，不能滥用（解决办法：退出函数之前，将不使用的局部变量全部删除）</p>
                        <p>3. 闭包会在父函数外部，改变父函数内部变量的值</p>

                    </Card>
                </Col>
            </Row>
        </div>
    </div >
)

export default Note7;

